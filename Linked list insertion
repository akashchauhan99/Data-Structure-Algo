 

#include<stdio.h>
#include<stdlib.h>
//Linked list
struct node
{
    int data;
    struct node * next;
};

// allocate node at the begining
struct node * insertAtBegining(struct node * head, int data){
    struct node * ptr = (struct node *)malloc(sizeof(struct node));
    ptr->next = head;
    ptr->data = data;
    return ptr;
}

// allocate node in between
struct node * insertInBetween(struct node * head, int data, int index){
    struct node * ptr = (struct node *)malloc(sizeof(struct node));
    struct node * p = head;
    int i = 0;
    while (i!=index-1)
    {
        p = p->next;
        i++;
    }
    ptr->data = data;
    ptr->next = p->next;
    p->next = ptr;
    return head;
}

// allocate node at end
struct node * insertATEnd(struct node * head, int data){
    struct node * ptr = (struct node *)malloc(sizeof(struct node));
    struct node * p = head;
    while (p->next != NULL)
    {
        p = p->next;
    }
    ptr->data = data;
    ptr->next = NULL;
    p->next = ptr;
    return head;
}

// allocate node after the node
struct node * insertAfterNode(struct node * head, struct node * prevNode,int data){
    struct node * ptr = (struct node *)malloc(sizeof(struct node));
    struct node * p = head;
    ptr->data = data;

    ptr->next = prevNode->next;
    prevNode->next = ptr;
    return head;
}


// Traversal
void linkedListTraversal(struct node * ptr){
    while (ptr != NULL)
    {
        printf("Element: %d\n", ptr->data);
        ptr = ptr->next;
    }
}

int main(){
    struct node * head;
    struct node * second;
    struct node * third;
    struct node * forth;

    // Allocate memory in heap
    head = (struct node *)malloc(sizeof(struct node));
    second = (struct node *)malloc(sizeof(struct node));
    third = (struct node *)malloc(sizeof(struct node));
    forth = (struct node *)malloc(sizeof(struct node));

    // First node
    head->data = 7;
    head->next = second;
    // second node
    second->data = 10;
    second->next = third;
    // third node
    third->data = 15;
    third->next = forth;
    //forth node
    forth->data = 20;
    forth->next = NULL;

    // Function call
    printf("Linked List before insertion\n");
    linkedListTraversal(head);
    head = insertAtBegining(head, 2);
    head = insertInBetween(head, 24, 1);
    head = insertATEnd(head, 25);
    head = insertAfterNode(head, third, 50);
    printf("Linked List after insertion\n");
    linkedListTraversal(head);


    return 0;
}

