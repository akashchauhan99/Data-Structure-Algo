#include<stdio.h>
#include<stdlib.h>

//stack implementation
struct stack{
    int size;
    int top;
    char *arr;
};

// Check if stack is empty
int isEmpty(struct stack *ptr)
{
    if (ptr->top == -1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

// Check if stack is full
int isFull(struct stack *ptr)
{
    if (ptr->top == ptr->size - 1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}


//push
void push(struct stack *ptr, char val){
    if (isFull(ptr))
    {
        printf("Stack Overflow! Cannot push %d to the stack\n", val);
    }
    else
    {
        ptr->top++;
        ptr->arr[ptr->top] = val;
    }
}

// pop
char pop(struct stack *ptr){
    if (isEmpty(ptr))
    {
        printf("Stack Underflow! Cannot pop from the stack\n");
        return -1;
    }
    else
    {
        char val = ptr->arr[ptr->top];
        ptr->top--;
        return val;
    }
}

// top of the stack
char stackTop(struct stack *sp){
    return sp->arr[sp->top];
}

// char match
int match(char a, char b){
    if (a == '(' && b == ')')
    {
        return 1;
    }
    if (a == '{' && b == '}')
    {
        return 1;
    }
    if (a == '[' && b == ']')
    {
        return 1;
    }
    return 0;
}

//parenthesis matching
int parenthesisMatch(char * exp){
    struct stack * sp;
    sp->size = 100;
    sp->top = -1;
    sp->arr = (char *)malloc(sp->size * sizeof(char));
    char popped_ch;

    for (int i = 0; exp[i] != '\0'; i++)
    {
        if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{')
        {
            push(sp, exp[i]);
        }
        else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}')
        {
            if (isEmpty(sp))
            {
                return 0;
            }
            popped_ch = pop(sp);
            if (!match(popped_ch, exp[i]))
            {
                return 0;
            }           
        }
    }
    if (isEmpty(sp))
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int main(){
    //Balanced
    char *exp1 = "[4-6]((8+6)*9)";
    //Not Balanced
    char *exp2 = "[4-6]((8+6)*9";
    if(parenthesisMatch(exp1)){
        printf("The parenthesis is balanced\n");
    }
    else
    {
        printf("The parenthesis is not balanced\n");
    }

    if(parenthesisMatch(exp2)){
        printf("The parenthesis is balanced\n");
    }
    else
    {
        printf("The parenthesis is not balanced\n");
    }
    

    return 0;
}
